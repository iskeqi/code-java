syntax = "proto3";

package monitor;

option java_package = "com.sr.vehicle.protobuf";

message Header {
    string nick_name = 2;

    string serial_number = 3;

    uint64 start_timestamp = 4;
}

message Record {
    uint64 timestamp = 1; // Linux时间戳，单位ms

    SystemHardware system_hardware = 2;

    ModuleState module_state = 3;

    HardwareState hardware_state = 4;

    LocationData location_data = 11;

    MovementData movement_data = 12;

    ReservedData reserved_data = 13;

}

// 系统核心资源状态
message SystemHardware {
    int32 cpu_usage = 1; // 0.1%
    int32 memory_usage = 2; // 0.1%
    int32 disk_usage = 3; // 0.1%
    int32 disk_remain_space = 4; // MB
    int32 cpu_temperature = 5; // 0.1℃
    int32 board_temperature = 6; // 0.1℃

    int32 self_memory_usage = 7; // 0.1%
    int32 self_memory_used_space = 8; // MB

    int32 wireless_signal_wlan0 = 21; // dB
    int32 network_ping_eth0 = 22; // ms
    int32 network_ping_enp3s0 = 23; // ms

    int64 network_eth0_pps = 24; // 废弃字段
    int64 network_eth0_bps = 25; // 废弃字段

    int64 network_eth0_rx_pps = 26;
    int64 network_eth0_rx_bps = 27;
    int64 network_eth0_tx_pps = 28;
    int64 network_eth0_tx_bps = 29;

    int64 network_enp3s0_rx_pps = 30;
    int64 network_enp3s0_rx_bps = 31;
    int64 network_enp3s0_tx_pps = 32;
    int64 network_enp3s0_tx_bps = 33;

    int64 network_can0_rx_pps = 34;
    int64 network_can0_rx_bps = 35;
    int64 network_can0_tx_pps = 36;
    int64 network_can0_tx_bps = 37;
}

// SROS中各module状态
message ModuleState {
    int32 module_ping_main = 1; // us
    int32 module_ping_network = 2;
    int32 module_ping_navigaton = 3;
    int32 module_ping_slam = 4;
    int32 module_ping_location = 5;
    int32 module_ping_monitor = 6;

    // other module
}

// 硬件模块状态
message HardwareState {
    int32 battery_velotage = 3; // mV
    int32 battery_current = 4;  // mA
    int32 battery_remain_percentage = 5; // 0.1%
    int32 battery_temperature = 6; // 0.1℃
    int32 battery_power = 7; // mW

    int32 body_temperature_sensor_0 = 21; // 0.1℃
}

// 记录定位数据，为了分析定位性能
message LocationData {

}

// 记录运动数据，为了分析运动性能
message MovementData {
    int32 actual_linear_velocity = 1; // mm/s
    int32 actual_angular_velocity = 2; // 0.001 rad/s

    int32 dst_linear_velocity = 3; // mm/s
    int32 dst_angular_velocity = 4; // 0.001 rad/s

}

// 预留数据，用于临时调试用
message ReservedData {
    int32 int32_0 = 1;
    int32 int32_1 = 2;
    int32 int32_2 = 3;
    int32 int32_3 = 4;

    double double_0 = 5;
    double double_1 = 6;
    double double_2 = 7;
    double double_3 = 8;

    string string_0 = 9;
    string string_1 = 10;
    string string_2 = 11;
    string string_3 = 12;
}
